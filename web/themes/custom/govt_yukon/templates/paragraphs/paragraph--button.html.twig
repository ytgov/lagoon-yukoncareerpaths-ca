{#
/**
 * @file
 * Paragraph Theme: Button.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set component_prefix = 'btn' %}
{% set button_style = 'btn--secondary' %}

{# Set button style. #}
{% if paragraph.field_button_style.value == 'primary' %}
  {% set button_style = 'btn--primary' %}
{% elseif paragraph.field_button_style.value == 'secondary' %}
  {% set button_style = 'btn--secondary' %}
{% elseif paragraph.field_button_style.value == 'text_link' %}
  {% set button_style = 'btn--text' %}
{% endif %}

{# Set button href. #}
{% set button_href = '' %}
{% if paragraph.field_link.0.url %}
  {% set button_href = paragraph.field_link.0.url %}
{% endif %}

{# If button has an icon. #}
{% set button_has_icon = false %}
{% if paragraph.field_font_awesome_icon.0.icon_name or paragraph.field_icon_image.0.entity.field_media_svg.0.entity.fileuri %}
  {% set button_has_icon = true %}
{% endif %}

{# If button is an external link. #}
{% set link_is_external = false %}
{% if paragraph.field_external_link.value %}
  {% set link_is_external = true %}
{% endif %}

{%
  set classes = [
    component_prefix,
    button_style,
    button_has_icon ? component_prefix ~ '--has-icon',
    link_is_external ? component_prefix ~ '--is-external'
  ]
%}
{% block paragraph %}
  <a{{ attributes.addClass(classes) }} href="{{ button_href }}">
    {% block content %}
      {% if paragraph.field_font_awesome_icon.0.icon_name %}
        <i class="{{ component_prefix ~ '__fa-icon' }} far fa-{{ paragraph.field_font_awesome_icon.0.icon_name }}" aria-hidden="true"></i>
      {% elseif paragraph.field_icon_image.0.entity.field_media_svg.0.entity.fileuri %}
        <div class="{{ component_prefix ~ '__icon-image' }}" aria-hidden="true">
          {{ content.field_icon_image }}
        </div>
      {% endif %}

      {% if paragraph.field_link.0.title %}
        {{ paragraph.field_link.0.title }}
      {% endif %}

      {{ content|without('field_link', 'field_icon_image', 'field_font_awesome_icon') }}
    {% endblock content %}
  </a>
{% endblock paragraph %}
