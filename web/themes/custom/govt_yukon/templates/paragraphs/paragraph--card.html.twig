{#
/**
 * @file
 * Paragraph Theme: Card.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set component_prefix = 'comp-card' %}

{% set component_id = component_prefix ~ '--id--' ~ paragraph.id.value %}
{% set attributes = attributes.setAttribute('id', component_id) %}

{# Color. #}
{% set icon_color = false %}
{% if paragraph.field_color.color %}
  {% set icon_color = paragraph.field_color.color %}
{% endif %}

{# Grab the color from the area category if present. #}
{% if paragraph.field_area_category.0.entity.field_background_color.color %}
  {% set icon_color = paragraph.field_area_category.0.entity.field_background_color.color %}
{% endif %}
{# / Color. #}

{# Icon - Image. #}
{% set icon_image = false %}
{% if paragraph.field_icon_image.0.entity.field_media_svg.0.entity.fileuri %}
  {% set icon_image = content.field_icon_image %}
{% endif %}

{# Grab the image from the area category if present. #}
{% if paragraph.field_area_category.0.entity.field_icon_image.0.entity.field_media_svg.0.entity.fileuri %}
  {% set icon_image = paragraph.field_area_category.0.entity.field_icon_image.0.entity.field_media_svg|view %}
{% endif %}
{# / Icon - Image. #}

{# Icon - Font Awesome. #}
{% set icon_fa_name = false %}
{% if paragraph.field_font_awesome_icon.0.icon_name %}
  {% set icon_fa_name = paragraph.field_font_awesome_icon.0.icon_name %}
{% endif %}

{# Grab the FA name from the area category if present. #}
{% if paragraph.field_area_category.0.entity.field_font_awesome_icon.0.icon_name %}
  {% set icon_fa_name = paragraph.field_area_category.0.entity.field_font_awesome_icon.0.icon_name %}
{% endif %}
{# / Icon - Font Awesome. #}

{# Has an icon. #}
{% set has_icon = false %}
{% if icon_fa_name or icon_image %}
  {% set has_icon = true %}
{% endif %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    component_prefix,
    has_icon ? component_prefix ~ '--has-icon'
  ]
%}

{% block paragraph %}
  {% if content.field_link[0]['#url'] %}
    <a{{ attributes.addClass(classes) }} href="{{ content.field_link[0]['#url'] }}">
      {% block content %}
        {% if icon_image %}
          <div class="{{ component_prefix ~ '__icon-image' }}" aria-hidden="true">
            {{ icon_image }}
          </div>
        {% elseif icon_fa_name %}
          <i class="{{ component_prefix ~ '__fa-icon' }} far fa-{{ icon_fa_name }}" aria-hidden="true" style="{{ icon_color ? 'color: ' ~ icon_color ~ ';' }}"></i>
        {% endif %}

        {% if content.field_link[0]['#title'] %}
          <div class="{{ component_prefix ~ '__text' }}">
            {{ content.field_link[0]['#title'] }}
          </div>
        {% endif %}
        <div class="{{ component_prefix ~ '__accent' }}" style="background: {{ icon_color }};" aria-hidden="true"></div>
      {% endblock content %}
    </a>

    {# Color styling to target the SVG fill. #}
    {% if icon_color and icon_image %}
      <style type="text/css">
        {{ '#' ~ component_id }} {{ '.' ~ component_prefix ~ '__icon-image' }} svg,
        {{ '#' ~ component_id }} {{ '.' ~ component_prefix ~ '__icon-image' }} svg path {
          fill: {{ icon_color }};
        }
      </style>
    {% endif %}
  {% endif %}
{% endblock paragraph %}
