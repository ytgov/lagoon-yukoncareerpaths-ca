{#
/**
 * @file
 * Paragraph Theme: Content List Item.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set component_prefix = 'comp-content-list-item' %}
{% set parent = paragraph.getParentEntity() %}
{% set content_list_style = '' %}

{% if parent and parent.field_content_list_style.value %}
  {% set content_list_style = parent.field_content_list_style.value %}
{% endif %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    component_prefix,
    paragraph.field_image_alignment.value ? component_prefix ~ '--align--' ~ paragraph.field_image_alignment.value,
    content_list_style ? component_prefix ~ '--style--' ~ content_list_style|clean_class
  ]
%}

{% set image_column_class = 'col-md-6' %}
{% set content_column_class = 'col-md-6' %}

{% if content_list_style == 'small_images' %}
  {% set image_column_class = 'col-md-4' %}
  {% set content_column_class = 'col-md-8' %}
{% endif %}

{% if paragraph.field_image_alignment.value == 'right' %}
  {% set image_column_class = 'col-md-6 order-md-2' %}

  {% if content_list_style == 'small_images' %}
    {% set image_column_class = 'col-md-4 order-md-2' %}
  {% endif %}
{% endif %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      <div class="row {{ component_prefix ~ '__row' }}">
        <div class="{{ image_column_class }} {{ component_prefix ~ '__col' }}">
          {% if paragraph.field_image.0.entity.field_media_image.0.entity.fileuri %}
            {# Wrap image in the first button URL if there is one. #}
            <div class="{{ component_prefix ~ '__image' }}">
              {% if paragraph.field_buttons.0.entity.field_link.0.url %}
                <a href="{{ paragraph.field_buttons.0.entity.field_link.0.url }}" class="link-fade" tabindex="-1">
                  {{ content.field_image }}
                </a>
              {% else %}
                {{ content.field_image }}
              {% endif %}
            </div>
          {% endif %}
        </div>
        <div class="{{ content_column_class}} {{ component_prefix ~ '__col' }}">
          <div class="{{ component_prefix ~ '__content' }}">
            {% if paragraph.field_title.value %}
              <h3 class="{{ component_prefix ~ '__title' }}">{{ content.field_title }}</h3>
            {% endif %}

            {{ content|without('field_buttons', 'field_image', 'field_title') }}

            {% if paragraph.field_buttons.0.entity.field_link.0.url %}
              <div class="{{ component_prefix ~ '__buttons' }}">
                {{ content.field_buttons }}
              </div>
            {% endif %}
          </div>
        </div>
      </div>
    {% endblock content %}
  </div>
{% endblock paragraph %}
