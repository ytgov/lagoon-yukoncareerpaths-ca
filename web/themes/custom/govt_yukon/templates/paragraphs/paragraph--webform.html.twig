{#
/**
 * @file
 * Paragraph Theme: Webform.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set component_prefix = 'comp-webform' %}
{# Determine if there should be a sidebar. #}
{% if paragraph.field_additional_info_title.value or paragraph.field_body.value %}
  {% set has_sidebar = true %}
{% endif %}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    component_prefix,
    has_sidebar ? component_prefix ~ '--has-sidebar'
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      <div class="{{ component_prefix ~ '__content' }}">
        {# Additional Information Sidebar. #}
        {% if has_sidebar %}
          <div class="{{ component_prefix ~ '__additional-info' }}">
            {% if paragraph.field_additional_info_title.value %}
              <h3 class="{{ component_prefix ~ '__additional-info__title' }}">{{ content.field_additional_info_title }}</h3>
            {% endif %}

            {% if paragraph.field_body.value %}
              <div class="{{ component_prefix ~ '__additional-info__body' }}">
                {{ content.field_body }}
              </div>
            {% endif %}
          </div>
        {% endif %}
        {# / Additional Information Sidebar. #}
        {# Webform Content. #}
        <div class="{{ component_prefix ~ '__webform' }}">
          {% if paragraph.field_title.value %}
            {% if has_sidebar %}
              <h3 class="{{ component_prefix ~ '__title' }}">{{ content.field_title }}</h3>
            {% else %}
              <h2 class="{{ component_prefix ~ '__title' }}">{{ content.field_title }}</h2>
            {% endif %}
          {% endif %}
          {{ content|without('field_title', 'field_additional_info_title', 'field_body') }}
        </div>
        {# / Webform Content. #}
      </div>
    {% endblock content %}
  </div>
{% endblock paragraph %}
