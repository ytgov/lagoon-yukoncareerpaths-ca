{#
/**
 * @file
 * Node Theme: Blog "Teaser".
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}
{% set component_prefix = 'comp-card' %}

{# Image. #}
{% set blog_image_path = '/' ~ directory ~ '/images/blog-placeholder.jpg' %}
{% set blog_image_alt = node.title.value %}

{% if node.field_page_banner.0.entity.field_media_image.0.entity.fileuri %}
  {% set blog_image %}
    {{ drupal_image(node.field_page_banner.0.entity.field_media_image.0.entity.fileuri, 'card_image', {alt: blog_image_alt}) }}
  {% endset %}
{% else %}
  {% set blog_image %}
    <img src="{{ blog_image_path }}" width="696" height="480" alt="{{ blog_image_alt }}" />
  {% endset %}
{% endif %}

{%
  set classes = [
  'node',
  'node--type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'node--view-mode-' ~ view_mode|clean_class
]
%}
<div{{ attributes.addClass(classes) }}>
  <div href="{{ url }}" class="{{ component_prefix }} {{ component_prefix ~ '--image' }}">
    <a href="{{ url }}" class="{{ component_prefix ~ '__link-wrapper' }}">
      <div class="{{ component_prefix ~ '__image' }}">
        {{ blog_image }}
      </div>
      <div class="{{ component_prefix ~ '__text' }}">
        {{ content.field_blog_date }}
        {{ label }}
      </div>
    </a>
    {% if node.field_blog_categories.0.target_id %}
      <div class="{{ component_prefix ~ '__categories' }}">
        {% for term in node.field_blog_categories %}
          {% set term_id = term.entity.id %}
          {% set term_link = base_path ~ 'blog?field_blog_categories_target_id[' ~ term_id ~ ']=' ~ term_id  %}
          {% set term_name = term.entity.name.value %}
          <a href="{{ term_link }}">{{  term_name }}</a>{% if not loop.last %}, {% endif %}
        {% endfor %}
      </div>
    {% endif %}
  </div>
</div>
